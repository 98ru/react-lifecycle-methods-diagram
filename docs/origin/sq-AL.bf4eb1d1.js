parcelRequire = (function (e) { const r = typeof parcelRequire === 'function' && parcelRequire; const n = typeof require === 'function' && require; let i = {}; function u(e, u) { if (e in i) return i[e]; const t = typeof parcelRequire === 'function' && parcelRequire; if (!u && t) return t(e, !0); if (r) return r(e, !0); if (n && typeof e === 'string') return n(e); const o = new Error(`Cannot find module '${e}'`); throw o.code = 'MODULE_NOT_FOUND', o; } return u.register = function (e, r) { i[e] = r; }, i = e(u), u.modules = i, u; }((require) => {
  let a = {}; a = {
    'React lifecycle methods diagram': 'Diagrama e metodave Lifecycle t\xEB React', Options: 'Opsione', 'Show less common lifecycles': 'Trego Lifecycle m\xEB pak t\xEB p\xEBrdorura', 'React version': 'Verzioni i React', Language: 'Gjuha', Mounting: 'Montimi', Updating: 'P\xEBrdit\xEBsimi', Unmounting: '\xC7montimi', '\u201C{name} phase\u201D': 'Faza \u201C{name}\u201D', 'New props': 'props t\xEB reja', 'Pure and has no side effects. May be paused, aborted or restarted by React.': 'Puro dhe pa efekte an\xEBsore. Mund t\xEB pezullohet, abortohet ose t\xEB rinis\xEB nga e para prej React-it.', 'Can read the DOM.': 'Mund t\xEB lexoj\xEB DOM-in.', 'Can work with DOM, run side effects, schedule updates.': 'Mund t\xEB punoj\xEB me DOM-in, t\xEB egzekutoj\xEB efekte an\xEBsore dhe t\xEB planifikoj\xEB p\xEBrdit\xEBsime.', 'React updates DOM and refs': 'React p\xEBrdit\xEBson DOM-in dhe Refs', 'Read docs for {name} (opens in a new tab)': 'Lexo dokumentimin e {name} (hapet n\xEB nj\xEB tab t\xEB ri)', "See project's page on GitHub (opens in a new tab)": 'Shih faqen e projektit n\xEB GitHub (hapet n\xEB nj\xEB tab t\xEB ri)', 'See project on': 'Shih faqen e projektit n\xEB',
  }; if (typeof exports === 'object' && typeof module !== 'undefined') { module.exports = a; } else if (typeof define === 'function' && define.amd) { define(() => a); } return { gQqQ: a };
}));
