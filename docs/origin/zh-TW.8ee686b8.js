parcelRequire = (function (e) { const r = typeof parcelRequire === 'function' && parcelRequire; const n = typeof require === 'function' && require; let i = {}; function u(e, u) { if (e in i) return i[e]; const t = typeof parcelRequire === 'function' && parcelRequire; if (!u && t) return t(e, !0); if (r) return r(e, !0); if (n && typeof e === 'string') return n(e); const o = new Error(`Cannot find module '${e}'`); throw o.code = 'MODULE_NOT_FOUND', o; } return u.register = function (e, r) { i[e] = r; }, i = e(u), u.modules = i, u; }((require) => {
  let a = {}; a = {
    'React lifecycle methods diagram': 'React\u751F\u547D\u5468\u671F\u65B9\u6CD5\u5716', Options: '\u9078\u9805', 'Show less common lifecycles': '\u986F\u793A\u4E0D\u5E38\u7528\u7684\u751F\u547D\u5468\u671F', 'React version': 'React\u7248\u672C', Language: '\u8A9E\u8A00', Mounting: '\u639B\u8F09\u6642', Updating: '\u66F4\u65B0\u6642', Unmounting: '\u5378\u8F09\u6642', '\u201C{name} phase\u201D': '\u201C{name} \u968E\u6BB5\u201D', 'Pure and has no side effects. May be paused, aborted or restarted by React.': '\u7D14\u7CB9\u4E14\u6C92\u6709\u526F\u4F5C\u7528\u3002 \u53EF\u80FD\u6703\u88AB React \u66AB\u505C\uFF0C\u4E2D\u6B62\u6216\u91CD\u65B0\u555F\u52D5\u3002', 'Can read the DOM.': '\u53EF\u4EE5\u8B80\u53D6 DOM\u3002', 'Can work with DOM, run side effects, schedule updates.': '\u53EF\u4EE5\u4F7F\u7528DOM\uFF0C\u57F7\u884C\u526F\u4F5C\u7528\uFF0C\u6392\u7A0B\u9032\u884C\u66F4\u65B0\u3002', 'React updates DOM and refs': 'React \u66F4\u65B0 DOM \u548C refs', 'Read docs for {name} (opens in a new tab)': '\u95B1\u8B80 {name} \u7684\u6587\u7AE0\uFF08\u5728\u65B0\u6A19\u7C3D\u4E2D\u958B\u555F\uFF09', "See project's page on GitHub (opens in a new tab)": '\u67E5\u770B GitHub \u4E0A\u7684\u5C08\u6848\u9801\u9762\uFF08\u5728\u65B0\u6A19\u7C3D\u9801\u4E2D\u958B\u555F\uFF09', 'See project on': '\u67E5\u770B\u5C08\u6848\u65BC',
  }; if (typeof exports === 'object' && typeof module !== 'undefined') { module.exports = a; } else if (typeof define === 'function' && define.amd) { define(() => a); } return { IVBR: a };
}));
